// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fguy/dispatch-simulation/services/courier (interfaces: Interface)

// Package mock_courier is a generated GoMock package.
package mock_courier

import (
	entities "github.com/fguy/dispatch-simulation/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Deliver mocks base method
func (m *MockInterface) Deliver(arg0 *entities.Dispatch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deliver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deliver indicates an expected call of Deliver
func (mr *MockInterfaceMockRecorder) Deliver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deliver", reflect.TypeOf((*MockInterface)(nil).Deliver), arg0)
}

// Dispatch mocks base method
func (m *MockInterface) Dispatch() (*entities.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch")
	ret0, _ := ret[0].(*entities.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dispatch indicates an expected call of Dispatch
func (mr *MockInterfaceMockRecorder) Dispatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockInterface)(nil).Dispatch))
}

// Wait mocks base method
func (m *MockInterface) Wait(arg0 *entities.Order) (chan *entities.Dispatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0)
	ret0, _ := ret[0].(chan *entities.Dispatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait
func (mr *MockInterfaceMockRecorder) Wait(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockInterface)(nil).Wait), arg0)
}
